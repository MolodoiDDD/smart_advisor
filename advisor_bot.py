import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackQueryHandler, ContextTypes

from smart_advisor.core.embeddings import EmbeddingService
from smart_advisor.core.database import VectorDatabase
from smart_advisor.services.query_processor import QueryProcessor
from smart_advisor.config.config import config

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class ScholarshipBot:
    def __init__(self, token: str):
        self.token = token
        self.embedding_service = EmbeddingService()
        self.vector_db = VectorDatabase(self.embedding_service)
        self.query_processor = QueryProcessor(self.vector_db)
        
    def create_main_menu(self) -> InlineKeyboardMarkup:
        keyboard = [
            [
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help"),
                InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        welcome_text = (
            "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–º–Ω–æ–≥–æ —Å–æ–≤–µ—Ç–Ω–∏–∫–∞!\n\n"
            "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö –∏ –¥—Ä—É–≥–∏—Ö –∞—Å–ø–µ–∫—Ç–∞—Ö —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–æ–π –∂–∏–∑–Ω–∏.\n\n"
            "–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n"
            "- –ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–∏–ø–µ–Ω–¥–∏—è?\n"
            "- –°–∫–æ–ª—å–∫–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è?\n"
            "- –ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å—Ç–∏–ø–µ–Ω–¥–∏–∏?\n"
            "- –ö–æ–≥–¥–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è?\n"
            "- –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å—Ç–∏–ø–µ–Ω–¥–∏—é?\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å."
        )
        await update.message.reply_text(welcome_text, reply_markup=self.create_main_menu())

    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        help_text = (
            "üìö –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
            "1. –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.\n\n"
            "2. –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:\n"
            "   - –ß—Ç–æ —Ç–∞–∫–æ–µ —Å—Ç–∏–ø–µ–Ω–¥–∏—è?\n"
            "   - –°–∫–æ–ª—å–∫–æ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –æ–±—ã—á–Ω–∞—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è?\n"
            "   - –ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π —Å—Ç–∏–ø–µ–Ω–¥–∏–∏?\n"
            "   - –ö–æ–≥–¥–∞ –≤—ã–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è —Å—Ç–∏–ø–µ–Ω–¥–∏—è?\n"
            "   - –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å —Å–æ—Ü–∏–∞–ª—å–Ω—É—é —Å—Ç–∏–ø–µ–Ω–¥–∏—é?\n\n"
            "3. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "   /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "   /help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "   /about - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ\n"
            "   /feedback - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å\n\n"
            "4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏."
        )
        await update.message.reply_text(help_text, reply_markup=self.create_main_menu())

    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            processing_message = await update.message.reply_text(
                "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...",
                reply_markup=self.create_main_menu()
            )
            
            response = self.query_processor.process_query(update.message.text)
            
            if hasattr(response, 'answer'):
                answer = response.answer
                confidence = response.confidence
                
                if confidence > 0.7:
                    confidence_text = "‚úÖ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ: –í—ã—Å–æ–∫–∞—è"
                elif confidence > 0.4:
                    confidence_text = "‚ö†Ô∏è –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ: –°—Ä–µ–¥–Ω—è—è"
                else:
                    confidence_text = "‚ùå –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ: –ù–∏–∑–∫–∞—è"
                
                await processing_message.edit_text(
                    f"{answer}\n\n{confidence_text}",
                    reply_markup=self.create_main_menu()
                )
            else:
                await processing_message.edit_text(
                    str(response),
                    reply_markup=self.create_main_menu()
                )
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {str(e)}")
            await update.message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å.",
                reply_markup=self.create_main_menu()
            )

    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        query = update.callback_query
        await query.answer()
        
        callback_data = query.data
        
        if callback_data == "help":
            text = (
                "‚ùì –ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:\n\n"
                "1. –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö\n"
                "2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "   /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
                "   /help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
                "   /about - –û –±–æ—Ç–µ"
            )
        elif callback_data == "about":
            text = (
                "‚ÑπÔ∏è –û –±–æ—Ç–µ:\n\n"
                "Smart Advisor - —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n"
                "–í–µ—Ä—Å–∏—è: 1.0.0\n"
                "–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 21.05.2024"
            )
        else:
            text = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é."
        
        await query.message.edit_text(text, reply_markup=self.create_main_menu())

    def run(self):
        application = Application.builder().token(self.token).build()

        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        application.add_handler(CallbackQueryHandler(self.handle_callback))

        application.run_polling()

def main():
    bot = ScholarshipBot(config.TELEGRAM_BOT_TOKEN)
    bot.run()

if __name__ == '__main__':
    main() 